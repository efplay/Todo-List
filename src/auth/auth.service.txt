import { Injectable } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UserService } from 'src/user/user.service';
import { AuthDto } from './dto/auth.dto';

/**
 * AuthService
 * 
 * Этот сервис предназначен для обработки операций аутентификации пользователей.
 * Он отвечает за проверку учетных данных пользователя, генерацию JWT (JSON Web Token)
 * для последующей авторизации и взаимодействие с базой данных пользователей
 * через UserService.
 */
@Injectable()
export class AuthService {
    /**
     * Конструктор класса AuthService
     * 
     * Здесь происходит внедрение зависимостей:
     * - JwtService: используется для генерации, валидации и декодирования JWT.
     * - UserService: предоставляет методы для поиска и управления данными пользователей.
     * 
     * @param jwt Экземпляр JwtService для работы с токенами.
     * @param userService Экземпляр UserService для работы с пользовательскими данными.
     */
    constructor(
        private jwt: JwtService, // Сервис для работы с JWT
        private userService: UserService // Сервис для работы с данными пользователей
    ) {}

    /**
     * Метод login
     * 
     * Основной метод для обработки логина пользователя. В текущей реализации метод
     * принимает объект с данными пользователя (например, email и пароль), но не выполняет
     * валидацию, а просто возвращает эти данные. В будущем сюда можно добавить:
     * - Проверку учетных данных (например, email и пароль).
     * - Генерацию JWT для успешной аутентификации.
     * - Обработку ошибок (например, пользователь не найден, неверный пароль и т.д.).
     * 
     * @param dto Объект AuthDto, содержащий данные для входа пользователя.
     *            Ожидается, что этот объект содержит такие поля, как email и пароль.
     * @returns Возвращает объект AuthDto. На данном этапе метод просто возвращает
     *          входящие данные без их обработки.
     * 
     * Пример использования:
     * ```
     * const authService = new AuthService(jwtService, userService);
     * const result = await authService.login({ email: 'user@example.com', password: '123456' });
     * console.log(result); // { email: 'user@example.com', password: '123456' }
     * ```
     */
    async login(dto: AuthDto) {
        // На данном этапе метод просто возвращает объект AuthDto
        // В будущем здесь будет добавлена логика проверки учетных данных.
        return dto;
    }
}


Подробности о добавленных комментариях:
Классовая документация:

Объясняет, для чего предназначен AuthService.
Подчеркивает ключевую функциональность: аутентификацию, генерацию токенов и работу с пользователями.
Документация конструктора:

Подробно описывает внедренные зависимости JwtService и UserService, а также их роль.
Указывает, что эти зависимости предоставляются через механизм DI (Dependency Injection) в NestJS.
Документация метода login:


Подробно описан параметр dto (какие данные он содержит, пример использования).

Встроенные комментарии в коде:

Указывает, что метод пока является "заглушкой" и ожидается его доработка в будущем.
Поясняет, что метод может включать больше логики (валидация пользователя, генерация токена и обработка ошибок).