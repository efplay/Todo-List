import { createParamDecorator, ExecutionContext } from '@nestjs/common';

// Импорт интерфейса User из Prisma-сгенерированного клиента
import { User } from 'prisma/generated/client';

/**
 * Декоратор `@CurrentUser` используется для получения текущего пользователя 
 * из запроса. Он позволяет извлечь либо весь объект пользователя, либо 
 * конкретное поле из него.
 */
export const CurrentUser = createParamDecorator(
  /**
   * @param data - Ключ из объекта User (опциональный параметр). Если указан, 
   * вернётся конкретное поле пользователя. Если нет, возвращается весь объект.
   * @param ctx - Контекст выполнения, предоставляемый NestJS, используется для 
   * извлечения объекта запроса.
   * @returns Поле из объекта пользователя или весь объект пользователя.
   */
  (data: keyof User, ctx: ExecutionContext) => {
    // Получение объекта запроса из контекста выполнения
    const request = ctx.switchToHttp().getRequest();

    // Извлечение объекта пользователя из запроса
    const user = request.user;

    // Возврат либо конкретного поля пользователя, либо всего объекта
    return data ? user[data] : user;
  }
);

Документация
Импортируемые модули
createParamDecorator: Функция из NestJS для создания пользовательских декораторов.
ExecutionContext: Класс NestJS, предоставляющий доступ к контексту выполнения, который содержит информацию о текущем запросе.
User: Интерфейс, сгенерированный Prisma, представляющий модель пользователя в базе данных.


Описание CurrentUser
@CurrentUser — это пользовательский декоратор для NestJS, 
который позволяет легко получать текущего пользователя из HTTP-запроса. 
Он извлекает объект пользователя,
ранее добавленный в запрос (обычно через middleware или Guard).




Код с комментариями
typescript
Копіювати код
import { createParamDecorator, ExecutionContext } from '@nestjs/common';

// Импорт интерфейса User из Prisma-сгенерированного клиента
import { User } from 'prisma/generated/client';

/**
 * Декоратор `@CurrentUser` используется для получения текущего пользователя 
 * из запроса. Он позволяет извлечь либо весь объект пользователя, либо 
 * конкретное поле из него.
 */
export const CurrentUser = createParamDecorator(
  /**
   * @param data - Ключ из объекта User (опциональный параметр). Если указан, 
   * вернётся конкретное поле пользователя. Если нет, возвращается весь объект.
   * @param ctx - Контекст выполнения, предоставляемый NestJS, используется для 
   * извлечения объекта запроса.
   * @returns Поле из объекта пользователя или весь объект пользователя.
   */
  (data: keyof User, ctx: ExecutionContext) => {
    // Получение объекта запроса из контекста выполнения
    const request = ctx.switchToHttp().getRequest();

    // Извлечение объекта пользователя из запроса
    const user = request.user;

    // Возврат либо конкретного поля пользователя, либо всего объекта
    return data ? user[data] : user;
  }
);
Документация
Импортируемые модули
createParamDecorator: Функция из NestJS для создания пользовательских декораторов.
ExecutionContext: Класс NestJS, предоставляющий доступ к контексту выполнения, который содержит информацию о текущем запросе.
User: Интерфейс, сгенерированный Prisma, представляющий модель пользователя в базе данных.
Описание CurrentUser
@CurrentUser — это пользовательский декоратор для NestJS, который позволяет легко получать текущего пользователя из HTTP-запроса. Он извлекает объект пользователя, ранее добавленный в запрос (обычно через middleware или Guard).

Параметры функции
data: keyof User (опционально)

Указывает, какое конкретное поле объекта пользователя нужно вернуть.
Если параметр data не указан, декоратор возвращает весь объект пользователя.

ctx: ExecutionContext

Контекст выполнения, который позволяет получить доступ к текущему запросу.


Основные преимущества

Упрощает доступ к текущему пользователю в обработчиках запросов.
Позволяет выборочно запрашивать только нужные поля пользователя.
Интегрируется с существующей архитектурой NestJS.